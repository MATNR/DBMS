//-----------------------------------------------------------------------------
// File: config.h
// Auth: SnipGhost
//                                                 Вспомогательные функции ядра
//-----------------------------------------------------------------------------
#ifndef CONFIG_H 
#define CONFIG_H
//-----------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS // За..колебали уже ворнинги тупых функций MS
//-----------------------------------------------------------------------------
#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <vector>
#include <map>
//-----------------------------------------------------------------------------
using namespace std;
//-----------------------------------------------------------------------------
#define DEBUG_CRIT 1            // Вывод критических сообщений
#define DEBUG_WARN 1            // Вывод предупреждений
#define DEBUG_NORM 1            // Вывод сообщений об успехе
//-----------------------------------------------------------------------------
const int MAX_LINE = 255;       // Максимальная длина строки считываемого файла
//-----------------------------------------------------------------------------
extern map<string, int> typeCodes;  // Коды зарегестрированных типов
extern char *STD_DELIMS;            // Разделители по умолчанию
//-----------------------------------------------------------------------------
void showMsg(int type, string msg);         // Показать отладочное сообщение
size_t getTypeSize(string type, void *val); // Получить размер в байтах типа
void readConfig(string path);               // Загрузить данные конфигурации
void* getValue(string type, char* value);   // Переводит строку в соотв. тип
void extValue(string type, void *val, ostream &out = cout); // Извлечь значение
//-----------------------------------------------------------------------------
typedef map<string, string> Header;            // Тип заголовка таблицы
typedef map<string, string>::iterator It_head; // Тип итератора по заголовку
typedef map<string, void*> Row;                // Тип одной записи в таблице
typedef map<string, void*>::iterator It_body;  // Тип итератора по данным
//-----------------------------------------------------------------------------
typedef int (*RowCmp)(Row &a, Row &b, string s); // Указатель на компаратор
//-----------------------------------------------------------------------------
int rowIntCmp(Row &a, Row &b, string s); // Компаратор для целых ячеек
int rowDouCmp(Row &a, Row &b, string s); // Компаратор для нецелых ячеек
int rowStrCmp(Row &a, Row &b, string s); // Компаратор для строковых ячеек
//-----------------------------------------------------------------------------
#endif /* CONFIG_H */
//-----------------------------------------------------------------------------