//-----------------------------------------------------------------------------
// File: kernel.h
// Auth: SnipGhost
//                                                 Вспомогательные функции ядра
//-----------------------------------------------------------------------------
#ifndef KERNEL_H 
#define KERNEL_H
//-----------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS // За..колебали уже ворнинги тупых функций MS
//-----------------------------------------------------------------------------
#include <iostream>
#include <sstream>
#include <iomanip>
#include <fstream>
#include <string>
#include <vector>
#include <ctime>
#include <map>
//-----------------------------------------------------------------------------
namespace Kernel                                       // Пространсво имен ядра
{
	using namespace std; // Вкладываем STD
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	class DBTable;       // Класс таблиц      (реализация: dbtable.cpp)
	class DBSet;         // Класс базы данных (реализация: dbset.cpp)
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	const int MAX_LINE = 1023;  // Максимальная длина строки считываемого файла
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	extern ostream *logs;              // Поток вывода логов СУБД
	extern char STD_DELIMS[20];        // Разделители по умолчанию
	extern map<string, int> typeCodes; // Коды зарегестрированных типов
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Получить текущее время в виде format (например: "%d.%m.%Y %I:%M:%S")
	string getLocalTime(const char *format);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 // Вывести сообщение (msg) указанного типа (type) в указанный поток (out)
	void showMsg(int type, string msg, ostream &out = *logs);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	size_t getTypeSize(string type, void *val); // Получить размер типа (байт)
	bool readConfig(string path);               // Загрузить конфигурацию
	void* getValue(string type, char* value);   // Переводит строку в void*
	string extValue(string type, void *val);    // Извлечь значение в строку
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Тип заголовка таблицы
	typedef map<string, string> Header;
	// Тип итератора по заголовку
	typedef map<string, string>::iterator It_head;
	// Тип одной записи в таблице
	typedef map<string, void*> Row;
	// Тип итератора по данным
	typedef map<string, void*>::iterator It_body;
	// Формат хранения таблиц в БД
	typedef map<string, DBTable*> Tab;
	// Указатель на компаратор
	typedef int (*RowCmp)(Row &a, Row &b, string s);
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	int rowIntCmp(Row &a, Row &b, string s); // Компаратор для целых
	int rowDouCmp(Row &a, Row &b, string s); // Компаратор для нецелых
	int rowStrCmp(Row &a, Row &b, string s); // Компаратор для строковых
}
//-----------------------------------------------------------------------------
#endif /* KERNEL_H */
//-----------------------------------------------------------------------------